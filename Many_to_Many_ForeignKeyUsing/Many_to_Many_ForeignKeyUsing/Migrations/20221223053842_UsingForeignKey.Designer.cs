// <auto-generated />
using Many_to_Many_ForeignKeyUsing.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManytoManyForeignKeyUsing.Migrations
{
    [DbContext(typeof(API_DBContext))]
    [Migration("20221223053842_UsingForeignKey")]
    partial class UsingForeignKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerCustomerProduct", b =>
                {
                    b.Property<long>("CustomerProductsCustomerProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("CustomersPropertiesCustomerId")
                        .HasColumnType("int");

                    b.HasKey("CustomerProductsCustomerProductId", "CustomersPropertiesCustomerId");

                    b.HasIndex("CustomersPropertiesCustomerId");

                    b.ToTable("CustomerCustomerProduct");
                });

            modelBuilder.Entity("CustomerProductProduct", b =>
                {
                    b.Property<long>("CustomerProductsCustomerProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("CustomerPropertiesProductId")
                        .HasColumnType("int");

                    b.HasKey("CustomerProductsCustomerProductId", "CustomerPropertiesProductId");

                    b.HasIndex("CustomerPropertiesProductId");

                    b.ToTable("CustomerProductProduct");
                });

            modelBuilder.Entity("Many_to_Many_ForeignKeyUsing.Model.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerAge")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Many_to_Many_ForeignKeyUsing.Model.CustomerProduct", b =>
                {
                    b.Property<long>("CustomerProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerProductId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CustomerProductId");

                    b.ToTable("CustomersProducts");
                });

            modelBuilder.Entity("Many_to_Many_ForeignKeyUsing.Model.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productPrice")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CustomerCustomerProduct", b =>
                {
                    b.HasOne("Many_to_Many_ForeignKeyUsing.Model.CustomerProduct", null)
                        .WithMany()
                        .HasForeignKey("CustomerProductsCustomerProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Many_to_Many_ForeignKeyUsing.Model.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersPropertiesCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerProductProduct", b =>
                {
                    b.HasOne("Many_to_Many_ForeignKeyUsing.Model.CustomerProduct", null)
                        .WithMany()
                        .HasForeignKey("CustomerProductsCustomerProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Many_to_Many_ForeignKeyUsing.Model.Product", null)
                        .WithMany()
                        .HasForeignKey("CustomerPropertiesProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
